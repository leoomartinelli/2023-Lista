#include <stdio.h>
#include <stdlib.h>
#include <omp.h>
#include <time.h>
#include <math.h>

int main() {
    int num_threads =1;  // Altere o número de threads desejado
    omp_set_num_threads(num_threads);

    int n = 10000000;  // Limite superior para encontrar números primos
    int *is_prime = (int *)malloc((n + 1) * sizeof(int));
    if (is_prime == NULL) {
        printf("Erro ao alocar memória.\n");
        return 1;
    }

    clock_t start_time, end_time;
    start_time = clock();  // Marca o início do tempo de execução

    // Inicializa o array de números primos
    for (int i = 0; i <= n; i++)
        is_prime[i] = 1;

    // Marca os números compostos
    is_prime[0] = is_prime[1] = 0;
    int sqrt_n = (int)sqrt(n);
#pragma omp parallel for
    for (int i = 2; i <= sqrt_n; i++) {
        if (is_prime[i]) {
            for (int j = i * i; j <= n; j += i) {
                is_prime[j] = 0;
            }
        }
    }

    // Imprime os números primos
    printf("Números primos de 2 a %d:\n", n);
    for (int i = 2; i <= n; i++) {
        if (is_prime[i]) {
            printf("%d ", i);
        }
    }
    printf("\n");

    end_time = clock();  // Marca o fim do tempo de execução
    double cpu_time_used = ((double)(end_time - start_time)) / CLOCKS_PER_SEC;
    printf("Tempo de execução: %f segundos\n", cpu_time_used);

    free(is_prime);
    return 0;
}